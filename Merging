After the repository is set up with multiple branches, users will want to merge
these branches into the master branch.  Merging can be simple or complicated,
depending on what was changed on the new branch.
This assumes that the user already has access to the repository on his/her
local machine and there is at least 1 branch on the repository other than the
master branch.

Simple merge (no conflicting commits):
A simple merge would be merging a branch that has no conflicting commits with
the master branch.  This would likely be because the files changed in each
branch were separate, or no commits were made on the master branch.
Note: You can merge into a branch that isn't master, by replacing master
      with whichever branch you want to merge into.
1. First, you must checkout the master branch.  Make sure you have no
   uncommitted changes on your current working branch and type in
   "git checkout master"
2. Type "git merge <name>" where <name> is the name of the branch you wish
   to merge into master.
3. Assuming no conflicts where created, the branch should merge into master
   and master will include all of the changes made on your branch.
4. You need to push these changes to the repository.  You can do this by typing
   "git push origin master"
5. If your branch is no longer needed, it can be deleted by typing
   "git branch -d <name>" where <name> is the name of the branch you want to
   delete.

Complicated merge (with conflicting commits):
A complicated merge will have conflicts because the same text in a file was
changed in the commits the separate the master branch and the branch to merge.
In order to merge successfully, these conflicts must be resolved.
1. First, checkout the master branch like in the above example by typing
   "git checkout master"
2. Type "git merge <name>" where <name> is the name of the branch you wish
   to merge into master.
3. If there are conflicting edits, git will notify you what type of conflict
   it is and in which file(s).
4. To get more information about the conflicts, you can run "git status"
5. There are 2 ways to deal with conflict resolution: manual editing and
   git's mergetool.
Manual Editing:
 6. To resolve the conflict by manually editing the file, you need to open the
    conflicting file in your favorite text editor.  Look for something like:
    "<<<<<<< HEAD:<filename>" where <filename> is the name of the file.
    The text below this will be what edits have been made on the branch you
    are merging into (most likely master).  Next, you will find something like:
    "======="
    This is the end of the text from master.  Below it will be the text from
    the branch you are trying to merge into master.  Below that will be
    something like:
    ">>>>>>> <name>:<filename>" where <name> is the name of the branch you are
    merging into master and <filename> is the name of the file.
 7. In order to resolve this conflict, remove everything between the lines with
    "<<<<<<<" and ">>>>>>>" and replace it with the text you want.
 8. Add the file to git by running "git add <filename>" where <filename> is
    the name of the file.
 9. Run "git status" again to verify all of the conflicts have been resolved.
 10. Commit the merge by running "git commit"
 11. Push the changes by running "git push origin master"
Git's mergetool:
 6. Run git's mergetool by running "git mergetool"
 7. This doesn't actually do much other than run a merge tool that you have
    used in the past on your machine.  For example, it ran tortoisemerge on my
    computer.
 8. After you merged the files in what git decided was your favorite merge
    tool, add the file by typing "git add <filename>"
 9. Run "git status" to verify all of the conflicts have been resolved.
 10. Commit the merge by typing "git commit"
 11. Push the changes by typing "git push origin master"
